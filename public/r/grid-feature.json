{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "grid-feature",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "lucide-react",
    "motion"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/grid-feature-demo.tsx",
      "content": "\"use client\";\nimport {\n  Zap,\n  Cpu,\n  Fingerprint,\n  Pencil,\n  Settings2,\n  Sparkles,\n} from \"lucide-react\";\nimport { motion, useReducedMotion } from \"motion/react\";\nimport { FeatureCard } from \"@/components/nurui/grid-feature\";\n\nconst features = [\n  {\n    title: \"Faaast\",\n    icon: Zap,\n    description: \"It supports an entire helping developers and innovate.\",\n  },\n  {\n    title: \"Powerful\",\n    icon: Cpu,\n    description: \"It supports an entire helping developers and businesses.\",\n  },\n  {\n    title: \"Security\",\n    icon: Fingerprint,\n    description: \"It supports an helping developers businesses.\",\n  },\n  {\n    title: \"Customization\",\n    icon: Pencil,\n    description: \"It supports helping developers and businesses innovate.\",\n  },\n  {\n    title: \"Control\",\n    icon: Settings2,\n    description: \"It supports helping developers and businesses innovate.\",\n  },\n  {\n    title: \"Built for AI\",\n    icon: Sparkles,\n    description: \"It supports helping developers and businesses innovate.\",\n  },\n];\n\nexport default function GridFeatureDemo() {\n  return (\n    <section className=\"py-16 md:py-32 \">\n      <div className=\"mx-auto w-full max-w-5xl space-y-8 px-4\">\n        <AnimatedContainer className=\"mx-auto max-w-3xl text-center\">\n          <h2 className=\"text-3xl text-[white]/80 font-bold tracking-wide text-balance md:text-4xl lg:text-5xl xl:font-extrabold\">\n            Power. Speed. Control.\n          </h2>\n          <p className=\"text-muted-foreground text-white/50 mt-4 text-sm tracking-wide text-balance md:text-base\">\n            Everything you need to build fast, secure, scalable apps.\n          </p>\n        </AnimatedContainer>\n\n        <AnimatedContainer\n          delay={0.4}\n          className=\"grid grid-cols-1 divide-x divide-y divide-dashed border border-[#374151] border-dashed sm:grid-cols-2 md:grid-cols-3\"\n        >\n          {features.map((feature, i) => (\n            <FeatureCard key={i} feature={feature} />\n          ))}\n        </AnimatedContainer>\n      </div>\n    </section>\n  );\n}\n\ntype ViewAnimationProps = {\n  delay?: number;\n  className?: React.ComponentProps<typeof motion.div>[\"className\"];\n  children: React.ReactNode;\n};\n\nfunction AnimatedContainer({\n  className,\n  delay = 0.1,\n  children,\n}: ViewAnimationProps) {\n  const shouldReduceMotion = useReducedMotion();\n\n  if (shouldReduceMotion) {\n    return children;\n  }\n\n  return (\n    <motion.div\n      initial={{ filter: \"blur(4px)\", translateY: -8, opacity: 0 }}\n      whileInView={{ filter: \"blur(0px)\", translateY: 0, opacity: 1 }}\n      viewport={{ once: true }}\n      transition={{ delay, duration: 0.8 }}\n      className={className}\n    >\n      {children}\n    </motion.div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/grid-feature.tsx",
      "content": "'use client';\nimport React from 'react';\nimport { cn } from '@/lib/utils'; // You can replace with `clsx` if needed\n\ntype FeatureType = {\n\ttitle: string;\n\ticon: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n\tdescription: string;\n};\n\ntype FeatureCardProps = React.ComponentProps<'div'> & {\n\tfeature: FeatureType;\n};\n\nexport function FeatureCard({ feature, className, ...props }: FeatureCardProps) {\n\tconst squares = genRandomPattern();\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\n\t\t\t\t'relative p-6 bg-white dark:bg-black overflow-hidden',\n\t\t\t\t'border-gray-200 dark:border-gray-700',\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...props}\n\t\t>\n\t\t\t{/* Background Grid Pattern */}\n\t\t\t<div className=\"absolute inset-0 z-0\">\n\t\t\t\t<GridPattern\n\t\t\t\t\twidth={20}\n\t\t\t\t\theight={20}\n\t\t\t\t\tx=\"0\"\n\t\t\t\t\ty=\"0\"\n\t\t\t\t\tsquares={squares}\n\t\t\t\t\tclassName=\"text-gray-200 dark:text-gray-700\"\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t{/* Content */}\n\t\t\t<div className=\"relative z-10\">\n\t\t\t\t<feature.icon className=\"text-gray-800 dark:text-gray-200 size-6\" strokeWidth={1} />\n\t\t\t\t<h3 className=\"mt-4 text-sm font-semibold text-gray-900 dark:text-gray-100\">{feature.title}</h3>\n\t\t\t\t<p className=\"mt-2 text-xs text-gray-500 dark:text-gray-400\">{feature.description}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nfunction GridPattern({\n\twidth,\n\theight,\n\tx,\n\ty,\n\tsquares,\n\t...props\n}: React.ComponentProps<'svg'> & {\n\twidth: number;\n\theight: number;\n\tx: string;\n\ty: string;\n\tsquares?: number[][];\n}) {\n\tconst patternId = React.useId().replace(/:/g, ''); // valid ID for svg\n\n\treturn (\n\t\t<svg\n\t\t\tviewBox=\"0 0 100% 100%\"\n\t\t\tclassName={cn('w-full h-full', props.className)}\n\t\t\taria-hidden=\"true\"\n\t\t\tpreserveAspectRatio=\"none\"\n\t\t>\n\t\t\t<defs>\n\t\t\t\t<pattern\n\t\t\t\t\tid={patternId}\n\t\t\t\t\twidth={width}\n\t\t\t\t\theight={height}\n\t\t\t\t\tpatternUnits=\"userSpaceOnUse\"\n\t\t\t\t\tx={x}\n\t\t\t\t\ty={y}\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td={`M0 ${height} V0 H${width}`}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\tstrokeWidth=\"0.5\"\n\t\t\t\t\t/>\n\t\t\t\t</pattern>\n\t\t\t</defs>\n\t\t\t<rect width=\"100%\" height=\"100%\" fill={`url(#${patternId})`} />\n\n\t\t\t{/* Optional squares */}\n\t\t\t{Array.isArray(squares) && (\n\t\t\t\t<g>\n\t\t\t\t\t{squares.map(([sx, sy], i) => (\n\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tx={sx * width}\n\t\t\t\t\t\t\ty={sy * height}\n\t\t\t\t\t\t\twidth={width}\n\t\t\t\t\t\t\theight={height}\n\t\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\t\tclassName=\"opacity-20\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</g>\n\t\t\t)}\n\t\t</svg>\n\t);\n}\n\nfunction genRandomPattern(length = 5): number[][] {\n\treturn Array.from({ length }, () => [\n\t\tMath.floor(Math.random() * 4) + 2,\n\t\tMath.floor(Math.random() * 4) + 2,\n\t]);\n}\n",
      "type": "registry:component"
    }
  ]
}